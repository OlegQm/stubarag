import httpx

from common.logging.global_logger import logger
from common.session.decorators import http_timer

LLM_URL = "http://llm:8507"
BACKEND_URL = "http://backend:8080"


@http_timer
async def post_get_rag_answer(conversation_content: list[dict], needs_enhancement: bool = False) -> str:
    """
    Sends a conversation content payload to the LLM container and retrieves the generated answer.

    Args:
        conversation_content (list[dict]): A list of dictionaries representing the conversation content 
                                           to be sent to the LLM container.

    Returns:
        str: The answer generated by the LLM container.

    Raises:
        httpx.RequestError: If there is an issue with the HTTP request.
        KeyError: If the response does not contain the expected "answer" key.

    Notes:
        - The function uses an asynchronous HTTP client with a timeout of 60 seconds for the request 
          and 10 seconds for the connection.
        - Logs debug information before and after querying the LLM container.
    """

    logger.debug("Querying LLM container...")

    async with httpx.AsyncClient(timeout=httpx.Timeout(120.0, connect=10.0)) as client:
        response = await client.post(f"{LLM_URL}/llm/get_rag_answer", json=conversation_content, 
                                     params={"needs_enhancement": needs_enhancement})
    
    answer = response.json()["answer"]
    logger.debug(answer)

    return answer


# Asynchronous function that retrieve data from ChromaDB
@http_timer
async def get_retrieve_data(
    text: str,
    filename: str = None,
    user: str = None,
    date: str = None,
    n_results: int = None,
    collection_name: str = None
) -> httpx.Response:
    """
    Asynchronously retrieves data based on the provided parameters.

    Args:
        - text (str): The prompt for embeddings retrieval.
        - filename (str, optional): The name of the file to filter the results. Defaults to None.
        - user (str, optional): The user to filter the results. Defaults to None.
        - date (str, optional): The date to filter the results. Defaults to None.
        - n_results (int, optional): The number of results to retrieve. Defaults to None.

    Returns:
        - response (httpx.Response): The response object from the API call.

    """

    # Prepare query parameters
    params = {
        "text": text,
        "filename": filename,
        "user": user,
        "date": date,
        "n_results": n_results,
        "collection_name": collection_name
    }

    # Filter out parameters with None values
    params = {k: v for k, v in params.items() if v is not None}

    try:
        # Make an API call to retrieve data
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{BACKEND_URL}/api/retrieve_data", params=params)
        # Return the response
        return response

    except Exception as e:
        logger.error(f"Failed to connect to the backend services: {e}")
        return response
